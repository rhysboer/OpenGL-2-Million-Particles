#version 430 core
layout(local_size_x = 64) in;

layout(std140, binding = 0) restrict buffer Data_Pos {
	vec4 position[];
};

layout(std140, binding = 1) restrict buffer Data_Vel {
	vec4 velocity[];
};

uniform int isActive;
uniform float deltaTime;
uniform vec3 origin;

void main(){
	const uint index = gl_GlobalInvocationID.x;
	
	velocity[index] *= 1 - 0.99f * deltaTime;
	if(isActive > 0){
		float acceleration = 1000.0f / max(1.0f, 0.01f * pow(distance(origin, position[index].xyz), 1.5f));
		velocity[index] += vec4(normalize(origin - position[index].xyz), 0.0f) * acceleration * deltaTime;
	}
	
	position[index] += velocity[index] * deltaTime;
}